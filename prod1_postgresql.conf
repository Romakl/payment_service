# В PostgreSQL есть несколько видов репликации:

# 1) Физическая (Physical) репликация:
#    Это когда мы копируем низкоуровневые данные (WAL-файлы) с мастер-сервера на реплику.
#    По сути, это "тупое" копирование всего как есть. Но зато быстро и надёжно.
#    Применяется, когда нужно получить точную копию базы, 
#    особенно круто для резервирования (хотя логическая тоже сойдёт).

# 2) Логическая (Logical) репликация:
#    Тут данные перегоняются в удобном для чтения виде (DML команды INSERT/UPDATE/DELETE).
#    Можно частично реплицировать таблицы, добавлять целевые структуры, фильтровать данные.
#    Подходит, когда нужно гибко мигрировать, обновлять схему или выбирать какие таблицы гонять.

# 3) Синхронная (Synchronous) репликация:
#    При такой схеме мастер-сервер ждёт подтверждения от реплики,
#    прежде чем сказать клиенту "ОК, данные записаны".
#    Плюс: гарантированная консистентность данных на реплике.
#    Минус: если реплика тупит, мастер тоже начинает тупить — задержки растут.

# 4) Асинхронная (Asynchronous) репликация:
#    Мастер не ждёт, пока реплика подтвердит получение данных.
#    Быстрее (мастер не тормозит), но если мастер упадёт, 
#    возможна небольшая потеря последних записей (реплика может отстать).

# 5) Решения на основе внешних инструментов (типа Slony, Bucardo):
#    Используют триггеры, логи или хитрые механизмы для копирования данных.
#    Подходят, когда встроенной логической репликации мало или нужно что-то особенное.
#    Но настраивать их — это такое себе развлечение, больше гемора, чем удовольствия.

# В итоге:
# - Физическая: "Копируем как есть" — для бэкапов и просто точных копий.
# - Логическая: "Умная" и гибкая для миграции и частичной репликации.
# - Синхронная/Асинхронная: балансируем между скоростью и надёжностью.
# - Сторонние инструменты: "Про мамонтов" — для экзотики или очень специфичных задач.


wal_level = logical

# max_wal_senders = 10 - разрешаем дофига процессов отправки логов.

max_wal_senders = 10

# max_replication_slots = 10 - позволяем создать 10 слотов репликации.

max_replication_slots = 10

# wal_keep_size = 1024MB - держим 1024 мегабайта журналов валов, чтобы подписчик не ныл:

wal_keep_size = 1024MB

# shared_buffers = 1GB - выделяем 1 гиг оперативки под буферы. 

shared_buffers = 1GB

# work_mem = 64MB - под задачи (сортировки, хэши) даём 64Мб.

work_mem = 64MB

# maintenance_work_mem = 256MB - для глобальных ремонтов и уборки даём 256Мб.

maintenance_work_mem = 256MB

# checkpoint_timeout = 15min - делаем чекпоинты каждые 15 минут.

checkpoint_timeout = 15min

# checkpoint_completion_target = 0.9 - растягиваем запись чекпоинта на 90% времени.

checkpoint_completion_target = 0.9

